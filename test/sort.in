(define null? (lambda (l) (= l ())))

(define cddr (lambda (l) (cdr (cdr l))))

(define is-sorted? ; #t if list is sorted; otherwise #f
  (lambda (l)
    (if (null? (cdr l))
        #t ; single-element lists are always sorted
      (and
       (< (car l) (car (cdr l)))
       (is-sorted? (cdr l))
       ) ; end and
      ) ; end if (null? (cddr l))
    ) ; end lambda
  )

(define less-than-list
  (lambda (a l)
    (if (null? l)
	()
      (if (< (car l) a)
	  (cons (car l) (less-than-list a (cdr l)))
	(less-than-list a (cdr l))
	) ; end if (< (car l) a
      ) ; end if (null? l)
    ) ; end lambda
  )

(define greater-equal-list
  (lambda (a l)
    (if (null? l)
	()
      (if (>= (car l) a)
	  (cons (car l) (greater-equal-list a (cdr l)))
	(greater-equal-list a (cdr l))
	) ; end if (>= (car l) a
      ) ; end if (null? l)
    ) ; end lambda
  )
	

(define sort 
  (lambda (l)
    (if (null? l)
	() ; zero-element lists are always sorted
      (append (sort (less-than-list (car l) (cdr l))) (cons (car l) (sort (greater-equal-list (car l) (cdr l)))))
      ) ; end if (null? (cdr l))
    ) ; end lambda
  )

(sort '(1))
; (sort '(2 1))
; (sort '(1 2 3 4 5 6 7 8 9)) ; expecting output: (1 2 3 4 5 6 7 8 9)
; (sort '(2 7 1 9 5 3 4 8 6)) ; expecting output: (1 2 3 4 5 6 7 8 9)
; (is-sorted? '(2 7 1 9 5 3 4 8 6)) ; #f
; (is-sorted? '(1 2 3 4 5 6 7 8 9)) ; #t
